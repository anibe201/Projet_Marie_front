{"remainingRequest":"C:\\Users\\AlexisAnohVianneyANI\\Downloads\\emarket-main\\shop\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\AlexisAnohVianneyANI\\Downloads\\emarket-main\\shop\\node_modules\\primevue\\inputnumber\\InputNumber.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\AlexisAnohVianneyANI\\Downloads\\emarket-main\\shop\\node_modules\\primevue\\inputnumber\\InputNumber.vue","mtime":1664720011518},{"path":"C:\\Users\\AlexisAnohVianneyANI\\Downloads\\emarket-main\\shop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664720015241},{"path":"C:\\Users\\AlexisAnohVianneyANI\\Downloads\\emarket-main\\shop\\node_modules\\babel-loader\\lib\\index.js","mtime":1665053040434},{"path":"C:\\Users\\AlexisAnohVianneyANI\\Downloads\\emarket-main\\shop\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1664720015241},{"path":"C:\\Users\\AlexisAnohVianneyANI\\Downloads\\emarket-main\\shop\\node_modules\\vue-loader\\lib\\index.js","mtime":1664810875252}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["InputNumber.vue"],"names":[],"mappings":";AAcfile":"InputNumber.vue","sourceRoot":"node_modules/primevue/inputnumber","sourcesContent":["<template>\n    <span :class=\"containerClass\" :style=\"styles\">\n        <INInputText ref=\"input\" :class=\"['p-inputnumber-input', inputClass]\" :style=\"inputStyle\" :value=\"formattedValue\" v-bind=\"$attrs\" :aria-valumin=\"min\" :aria-valuemax=\"max\"\n           @input=\"onUserInput\" @keydown=\"onInputKeyDown\" @keyup=\"onInputKeyUp\" @keypress=\"onInputKeyPress\" @paste=\"onPaste\" @click=\"onInputClick\" @focus=\"onInputFocus\" @blur=\"onInputBlur\"/>\n        <span class=\"p-inputnumber-button-group\" v-if=\"showButtons && buttonLayout === 'stacked'\">\n            <INButton :class=\"upButtonClass\" :icon=\"incrementButtonIcon\" v-on=\"upButtonListeners\" :disabled=\"$attrs.disabled\" />\n            <INButton :class=\"downButtonClass\" :icon=\"decrementButtonIcon\" v-on=\"downButtonListeners\" :disabled=\"$attrs.disabled\" />\n        </span>\n        <INButton :class=\"upButtonClass\" :icon=\"incrementButtonIcon\" v-on=\"upButtonListeners\" v-if=\"showButtons && buttonLayout !== 'stacked'\" :disabled=\"$attrs.disabled\" />\n        <INButton :class=\"downButtonClass\" :icon=\"decrementButtonIcon\" v-on=\"downButtonListeners\" v-if=\"showButtons && buttonLayout !== 'stacked'\" :disabled=\"$attrs.disabled\" />\n    </span>\n</template>\n\n<script>\nimport InputText from '../inputtext/InputText';\nimport Button from '../button/Button';\n\nexport default {\n    inheritAttrs: false,\n    props: {\n        value: {\n            type: Number,\n            default: null\n        },\n        format: {\n            type: Boolean,\n            default: true\n        },\n        showButtons: {\n            type: Boolean,\n            default: false\n        },\n        buttonLayout: {\n            type: String,\n            default: 'stacked'\n        },\n        incrementButtonClass: {\n            type: String,\n            default: null,\n        },\n        decrementButtonClass: {\n            type: String,\n            default: null,\n        },\n        incrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-up',\n        },\n        decrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-down',\n        },\n        locale: {\n            type: String,\n            default: undefined\n        },\n        localeMatcher: {\n            type: String,\n            default: undefined\n        },\n        mode: {\n            type: String,\n            default: 'decimal'\n        },\n        prefix: {\n            type: String,\n            default: null\n        },\n        suffix: {\n            type: String,\n            default: null\n        },\n        currency: {\n            type: String,\n            default: undefined\n        },\n        currencyDisplay: {\n            type: String,\n            default: undefined\n        },\n        useGrouping: {\n            type: Boolean,\n            default: true\n        },\n        minFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        maxFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        min: {\n            type: Number,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        styles: null,\n        className: null,\n        inputStyle: null,\n        inputClass: null\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            d_value: null,\n            focused: false\n        }\n    },\n    watch: {\n        value(newValue) {\n            this.d_value = newValue;\n        },\n\t\tlocale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._decimal = this.getDecimalExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = d => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {...this.getOptions(), useGrouping: false});\n            return new RegExp(`[${formatter.format(1.1).replace(this._currency, '').trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay,\n                    minimumFractionDigits: 0, maximumFractionDigits: 0});\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`,'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            }\n            else {\n                const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay});\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar||'')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            }\n            else {\n                const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay,\n                    minimumFractionDigits: 0, maximumFractionDigits: 0});\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar||'')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') { // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                                .replace(this._suffix, '')\n                                .replace(this._prefix, '')\n                                .trim()\n                                .replace(/\\s/g, '')\n                                .replace(this._currency, '')\n                                .replace(this._group, '')\n                                .replace(this._minusSign, '-')\n                                .replace(this._decimal, '.')\n                                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-') // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            if (this.$refs.input) {\n                let step = this.step * dir;\n                let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n                let newValue = this.validateValue(currentValue + step);\n\n                this.updateInput(newValue, null, 'spin');\n                this.updateModel(event, newValue);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.$attrs.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.$attrs.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            this.lastValue = event.target.value;\n            if (event.shiftKey || event.altKey) {\n                this.isSpecialChar = true;\n                return;\n            }\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            if (event.altKey) {\n                event.preventDefault();\n            }\n\n            switch (event.which) {\n                //up\n                case 38:\n                    this.spin(event, 1);\n                    event.preventDefault();\n                break;\n\n                //down\n                case 40:\n                    this.spin(event, -1);\n                    event.preventDefault();\n                break;\n\n                //left\n                case 37:\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n                break;\n\n                //right\n                case 39:\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n                break;\n\n                //enter\n                case 13:\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                break;\n\n                //backspace\n                case 8: {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart - 1);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            }\n                            else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                                }\n                                else {\n                                    newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                                }\n                            }\n                            else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + insertedText + inputValue.slice(selectionStart);\n                            }\n                            else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            }\n                            else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    }\n                    else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                // del\n                case 46:\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        const deleteChar = inputValue.charAt(selectionStart);\n                        const { decimalCharIndex, decimalCharIndexWithoutPrefix } = this.getDecimalCharIndexes(inputValue);\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            const decimalLength = this.getDecimalLength(inputValue);\n\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            }\n                            else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n\n                                if (decimalLength) {\n                                    this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                                }\n                                else {\n                                    newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                                }\n                            }\n                            else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                const insertedText = this.isDecimalMode() && (this.minFractionDigits || 0) < decimalLength ? '' : '0';\n                                newValueStr = inputValue.slice(0, selectionStart) + insertedText + inputValue.slice(selectionStart + 1);\n                            }\n                            else if (decimalCharIndexWithoutPrefix === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            }\n                            else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    }\n                    else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n                break;\n\n                default:\n                break;\n            }\n        },\n        onInputKeyUp(event) {\n            this.$emit('keyup', event);\n        },\n        onInputKeyPress(event) {\n            event.preventDefault();\n            let code = event.which || event.keyCode;\n            let char = String.fromCharCode(code);\n            const isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n            if (data) {\n                let filteredData = this.parseValue(data);\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char) || char === '-') {\n                this._minusSign.lastIndex = 0;\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalMode() {\n            return this.mode === 'decimal';\n        },\n        getDecimalCharIndexes(val) {\n            let decimalCharIndex = val.search(this._decimal);\n            this._decimal.lastIndex = 0;\n\n            const filteredVal = val.replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '');\n            const decimalCharIndexWithoutPrefix = filteredVal.search(this._decimal);\n            this._decimal.lastIndex = 0;\n\n            return { decimalCharIndex, decimalCharIndexWithoutPrefix };\n        },\n        getCharIndexes(val) {\n            const decimalCharIndex = val.search(this._decimal);\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = val.search(this._minusSign);\n            this._minusSign.lastIndex = 0;\n            const suffixCharIndex = val.search(this._suffix);\n            this._suffix.lastIndex = 0;\n            const currencyCharIndex = val.search(this._currency);\n            this._currency.lastIndex = 0;\n\n            return { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex };\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n            this._minusSign.lastIndex = 0;\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const { decimalCharIndex, minusCharIndex, suffixCharIndex, currencyCharIndex } = this.getCharIndexes(inputValue);\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            }\n            else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                }\n                else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n                else if (decimalCharIndex === -1 && this.maxFractionDigits) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            }\n            else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                        const charIndex = currencyCharIndex >= selectionStart ? currencyCharIndex - 1 : (suffixCharIndex >= selectionStart ? suffixCharIndex : inputValue.length);\n\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length, charIndex) + inputValue.slice(charIndex);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                }\n                else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text === '.' ? text : text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n                this._decimal.lastIndex = 0;\n                return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : (value || this.formatValue(text));\n            }\n            else if ((end - start) === value.length) {\n                return this.formatValue(text);\n            }\n            else if (start === 0) {\n                return text + value.slice(end);\n            }\n            else if (end === value.length) {\n                return value.slice(0, start) + text;\n            }\n            else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if ((end - start) === value.length)\n                newValueStr = '';\n            else if (start === 0)\n                newValueStr = value.slice(end);\n            else if (end === value.length)\n                newValueStr = value.slice(0, start);\n            else\n                newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            // remove prefix\n            let prefixLength = (this.prefixChar || '').length;\n            inputValue = inputValue.replace(this._prefix, '');\n            selectionStart = selectionStart - prefixLength;\n\n            let char = inputValue.charAt(selectionStart);\n            if (this.isNumeralChar(char)) {\n                return selectionStart + prefixLength;\n            }\n\n            //left\n            let i = selectionStart - 1;\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i + prefixLength;\n                    break;\n                }\n                else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            }\n            else {\n                i = selectionStart;\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n                    if (this.isNumeralChar(char)) {\n                        index = i + prefixLength;\n                        break;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n\n            return index || 0;\n        },\n        onInputClick() {\n            this.initCursor();\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex =  0;\n            this._decimal.lastIndex =  0;\n            this._group.lastIndex =  0;\n            this._minusSign.lastIndex =  0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                newValue = !newValue && !this.allowEmpty ? 0 : newValue;\n                this.updateInput(newValue, insertedValueStr, operation, valueStr);\n\n                this.handleOnInput(event, currentValue, newValue);\n            }\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', newValue);\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (value === '-' || value == null) {\n                return null;\n            }\n\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation, valueStr) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (newValue !== valueStr) {\n                newValue = this.concatValues(newValue, valueStr);\n            }\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                const index = this.initCursor();\n                const selectionEnd = index + insertedValueStr.length;\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    else if (operation === 'delete-single')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    else if (operation === 'delete-range' || operation === 'spin')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    }\n                    else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += (-1 * diff) + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (inputValue === '-' && operation === 'insert') {\n                    this.$refs.input.$el.setSelectionRange(0, 0);\n                    const index = this.initCursor();\n                    const selectionEnd = index + insertedValueStr.length + 1;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        concatValues(val1, val2) {\n            if (val1 && val2) {\n                let decimalCharIndex = val2.search(this._decimal);\n                this._decimal.lastIndex = 0;\n\n                return decimalCharIndex !== -1 ? (val1.split(this._decimal)[0] + val2.slice(decimalCharIndex)) : val1;\n            }\n\n            return val1;\n        },\n        getDecimalLength(value) {\n            if (value) {\n                const valueSplit = value.split(this._decimal);\n\n                if (valueSplit.length === 2) {\n                    return valueSplit[1].replace(this._suffix, '')\n                                .trim()\n                                .replace(/\\s/g, '')\n                                .replace(this._currency, '').length;\n                }\n            }\n\n            return 0;\n        },\n        updateModel(event, value) {\n            this.d_value = value;\n            this.$emit('input', value);\n        },\n        onInputFocus(event) {\n            this.focused = true;\n            this.$emit('focus', event);\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n            this.$emit('blur', event);\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        },\n        maxBoundry() {\n            return this.d_value >= this.max;\n        },\n        minBoundry() {\n            return this.d_value <= this.min;\n        },\n    },\n    computed: {\n        containerClass() {\n            return ['p-inputnumber p-component p-inputwrapper', this.className, {\n                'p-inputwrapper-filled': this.filled,\n                'p-inputwrapper-focus': this.focused,\n                'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'\n            }];\n        },\n        upButtonClass() {\n            return ['p-inputnumber-button p-inputnumber-button-up', this.incrementButtonClass, {\n                'p-disabled': this.showButtons && this.max !== null && this.maxBoundry()\n            }];\n        },\n        downButtonClass() {\n            return ['p-inputnumber-button p-inputnumber-button-down', this.decrementButtonClass, {\n                'p-disabled': this.showButtons && this.min !== null && this.minBoundry()\n            }];\n        },\n        filled() {\n            return (this.value != null && this.value.toString().length > 0)\n        },\n        upButtonListeners() {\n            return {\n                mousedown: event => this.onUpButtonMouseDown(event),\n                mouseup: event => this.onUpButtonMouseUp(event),\n                mouseleave: event => this.onUpButtonMouseLeave(event),\n                keydown: event => this.onUpButtonKeyDown(event),\n                keyup: event => this.onUpButtonKeyUp(event)\n            }\n        },\n        downButtonListeners() {\n            return {\n                mousedown: event => this.onDownButtonMouseDown(event),\n                mouseup: event => this.onDownButtonMouseUp(event),\n                mouseleave: event => this.onDownButtonMouseLeave(event),\n                keydown: event => this.onDownButtonKeyDown(event),\n                keyup: event => this.onDownButtonKeyUp(event)\n            }\n        },\n        formattedValue() {\n            const val = !this.value && !this.allowEmpty ? 0 : this.value;\n            return this.formatValue(val);\n        },\n        getFormatter() {\n            return this.numberFormat;\n        }\n    },\n    components: {\n        'INInputText': InputText,\n        'INButton': Button\n    }\n}\n</script>\n\n<style>\n.p-inputnumber {\n    display: inline-flex;\n}\n\n.p-inputnumber-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex: 0 0 auto;\n}\n\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label,\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label {\n    display: none;\n}\n\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    padding: 0;\n}\n\n.p-inputnumber-buttons-stacked .p-inputnumber-input {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    border-bottom-left-radius: 0;\n    padding: 0;\n}\n\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group {\n    display: flex;\n    flex-direction: column;\n}\n\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button {\n    flex: 1 1 auto;\n}\n\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up {\n    order: 3;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n}\n\n.p-inputnumber-buttons-horizontal .p-inputnumber-input {\n    order: 2;\n    border-radius: 0;\n}\n\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down {\n    order: 1;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.p-inputnumber-buttons-vertical {\n    flex-direction: column;\n}\n\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up {\n    order: 1;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    width: 100%;\n}\n\n.p-inputnumber-buttons-vertical .p-inputnumber-input {\n    order: 2;\n    border-radius: 0;\n    text-align: center;\n}\n\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down {\n    order: 3;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    width: 100%;\n}\n\n.p-inputnumber-input {\n    flex: 1 1 auto;\n}\n\n.p-fluid .p-inputnumber {\n    width: 100%;\n}\n\n.p-fluid .p-inputnumber .p-inputnumber-input {\n    width: 1%;\n}\n\n.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input {\n    width: 100%;\n}\n</style>\n"]}]}